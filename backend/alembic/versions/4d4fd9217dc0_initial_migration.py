"""Initial migration

Revision ID: 4d4fd9217dc0
Revises: 
Create Date: 2025-06-18 05:46:18.645169

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "4d4fd9217dc0"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "assets",
        sa.Column(
            "asset_type", sa.Enum("MACHINE", "HOPPER", name="assettype"), nullable=False
        ),
    )
    op.add_column("assets", sa.Column("is_active", sa.Boolean(), nullable=True))
    op.add_column("assets", sa.Column("updated_at", sa.DateTime(), nullable=False))
    op.alter_column(
        "assets",
        "name",
        existing_type=sa.VARCHAR(length=200),
        type_=sa.String(length=100),
        existing_nullable=False,
    )
    op.alter_column(
        "assets",
        "serial_number",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=50),
        existing_nullable=True,
    )
    op.alter_column(
        "assets",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint("assets_inventory_number_key", "assets", type_="unique")
    op.drop_index("idx_assets_type", table_name="assets")
    op.create_index(op.f("ix_assets_id"), "assets", ["id"], unique=False)
    op.create_unique_constraint(None, "assets", ["serial_number"])
    op.drop_column("assets", "type")
    op.drop_column("assets", "metadata")
    op.drop_column("assets", "status")
    op.drop_column("assets", "inventory_number")
    op.add_column(
        "hopper_operations",
        sa.Column("quantity_added", sa.Numeric(precision=10, scale=3), nullable=True),
    )
    op.add_column(
        "hopper_operations", sa.Column("machine_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "hopper_operations", sa.Column("notes", sa.String(length=500), nullable=True)
    )
    op.add_column(
        "hopper_operations", sa.Column("updated_at", sa.DateTime(), nullable=False)
    )
    op.alter_column(
        "hopper_operations", "hopper_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "hopper_operations",
        "operation_type",
        existing_type=sa.VARCHAR(length=50),
        type_=sa.Enum(
            "FILL", "INSTALL", "REMOVE", "CLEAN", "CHECK", name="operationtype"
        ),
        nullable=False,
    )
    op.alter_column(
        "hopper_operations", "operator_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "hopper_operations",
        "photos",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_nullable=True,
        existing_server_default=sa.text("'[]'::jsonb"),
    )
    op.alter_column(
        "hopper_operations",
        "sync_status",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_nullable=True,
        existing_server_default=sa.text(
            '\'{"web": false, "mobile": false, "telegram": false}\'::jsonb'
        ),
    )
    op.alter_column(
        "hopper_operations",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("idx_hopper_operations_created", table_name="hopper_operations")
    op.create_foreign_key(None, "hopper_operations", "assets", ["machine_id"], ["id"])
    op.add_column(
        "ingredients", sa.Column("category", sa.String(length=50), nullable=True)
    )
    op.add_column("ingredients", sa.Column("updated_at", sa.DateTime(), nullable=False))
    op.alter_column(
        "ingredients",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint("ingredients_code_key", "ingredients", type_="unique")
    op.create_index(op.f("ix_ingredients_code"), "ingredients", ["code"], unique=True)
    op.add_column("users", sa.Column("phone", sa.String(length=20), nullable=True))
    op.add_column("users", sa.Column("updated_at", sa.DateTime(), nullable=False))
    op.alter_column(
        "users",
        "role",
        existing_type=sa.VARCHAR(length=50),
        type_=sa.Enum("ADMIN", "WAREHOUSE", "OPERATOR", "DRIVER", name="userrole"),
        existing_nullable=True,
        existing_server_default=sa.text("'operator'::character varying"),
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint("users_telegram_id_key", "users", type_="unique")
    op.create_index(op.f("ix_users_telegram_id"), "users", ["telegram_id"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_telegram_id"), table_name="users")
    op.create_unique_constraint("users_telegram_id_key", "users", ["telegram_id"])
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "role",
        existing_type=sa.Enum(
            "ADMIN", "WAREHOUSE", "OPERATOR", "DRIVER", name="userrole"
        ),
        type_=sa.VARCHAR(length=50),
        existing_nullable=True,
        existing_server_default=sa.text("'operator'::character varying"),
    )
    op.drop_column("users", "updated_at")
    op.drop_column("users", "phone")
    op.drop_index(op.f("ix_ingredients_code"), table_name="ingredients")
    op.create_unique_constraint("ingredients_code_key", "ingredients", ["code"])
    op.alter_column(
        "ingredients",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_column("ingredients", "updated_at")
    op.drop_column("ingredients", "category")
    op.drop_constraint(None, "hopper_operations", type_="foreignkey")
    op.create_index(
        "idx_hopper_operations_created",
        "hopper_operations",
        [sa.text("created_at DESC")],
        unique=False,
    )
    op.alter_column(
        "hopper_operations",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "hopper_operations",
        "sync_status",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
        existing_server_default=sa.text(
            '\'{"web": false, "mobile": false, "telegram": false}\'::jsonb'
        ),
    )
    op.alter_column(
        "hopper_operations",
        "photos",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
        existing_server_default=sa.text("'[]'::jsonb"),
    )
    op.alter_column(
        "hopper_operations", "operator_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "hopper_operations",
        "operation_type",
        existing_type=sa.Enum(
            "FILL", "INSTALL", "REMOVE", "CLEAN", "CHECK", name="operationtype"
        ),
        type_=sa.VARCHAR(length=50),
        nullable=True,
    )
    op.alter_column(
        "hopper_operations", "hopper_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_column("hopper_operations", "updated_at")
    op.drop_column("hopper_operations", "notes")
    op.drop_column("hopper_operations", "machine_id")
    op.drop_column("hopper_operations", "quantity_added")
    op.add_column(
        "assets",
        sa.Column(
            "inventory_number",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "assets",
        sa.Column(
            "status",
            sa.VARCHAR(length=50),
            server_default=sa.text("'active'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "assets",
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "assets",
        sa.Column("type", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "assets", type_="unique")
    op.drop_index(op.f("ix_assets_id"), table_name="assets")
    op.create_index("idx_assets_type", "assets", ["type"], unique=False)
    op.create_unique_constraint(
        "assets_inventory_number_key", "assets", ["inventory_number"]
    )
    op.alter_column(
        "assets",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "assets",
        "serial_number",
        existing_type=sa.String(length=50),
        type_=sa.VARCHAR(length=100),
        existing_nullable=True,
    )
    op.alter_column(
        "assets",
        "name",
        existing_type=sa.String(length=100),
        type_=sa.VARCHAR(length=200),
        existing_nullable=False,
    )
    op.drop_column("assets", "updated_at")
    op.drop_column("assets", "is_active")
    op.drop_column("assets", "asset_type")
    # ### end Alembic commands ###
