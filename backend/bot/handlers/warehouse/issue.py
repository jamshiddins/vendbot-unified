from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from typing import Dict, List

from db.database import AsyncSessionLocal
from db.models.user import UserRole, User
from core.services.user_service import UserService
from bot.states import WarehouseIssueStates
from bot.keyboards.inline import get_confirm_keyboard
from bot.filters import RoleFilter
from api.websocket import ws_manager

router = Router(name="warehouse_issue")

@router.message(F.text == "üì§ –í—ã–¥–∞—á–∞", RoleFilter(UserRole.WAREHOUSE))
async def start_issue(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞"""
    await state.clear()
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        user_service = UserService(db)
        operators = await user_service.get_active_users_by_role(UserRole.OPERATOR)
        
        if not operators:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        keyboard = InlineKeyboardBuilder()
        for operator in operators:
            keyboard.button(
                text=f"üë§ {operator.full_name or operator.username or f'ID{operator.id}'}",
                callback_data=f"operator:{operator.id}"
            )
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        keyboard.adjust(1)
        
        await message.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–¥–∞—á–∏:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(WarehouseIssueStates.select_operator)

@router.callback_query(
    WarehouseIssueStates.select_operator,
    F.data.startswith("operator:")
)
async def operator_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    operator_id = int(callback.data.split(":")[1])
    await state.update_data(operator_id=operator_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –≤—ã–¥–∞—á–∏
    preset_items = [
        {"name": "–ö–æ—Ñ–µ –ê—Ä–∞–±–∏–∫–∞", "quantity": 5.0, "unit": "–∫–≥"},
        {"name": "–ú–æ–ª–æ–∫–æ —Å—É—Ö–æ–µ", "quantity": 3.0, "unit": "–∫–≥"},
        {"name": "–°–∞—Ö–∞—Ä", "quantity": 2.0, "unit": "–∫–≥"},
        {"name": "–°—Ç–∞–∫–∞–Ω—ã 200–º–ª", "quantity": 1000, "unit": "—à—Ç"},
        {"name": "–†–∞–∑–º–µ—à–∏–≤–∞—Ç–µ–ª–∏", "quantity": 1000, "unit": "—à—Ç"}
    ]
    
    await state.update_data(items=preset_items)
    
    text = "üì¶ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –≤—ã–¥–∞—á–∏:**\n\n"
    for item in preset_items:
        text += f"‚Ä¢ {item['name']}: {item['quantity']} {item['unit']}\n"
    
    text += "\n–í—ã–¥–∞—Ç—å —ç—Ç–æ—Ç –Ω–∞–±–æ—Ä?"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_confirm_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(WarehouseIssueStates.confirm)

@router.callback_query(
    WarehouseIssueStates.confirm,
    F.data == "confirm:yes"
)
async def confirm_issue(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏"""
    data = await state.get_data()
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_service = UserService(db)
        warehouse_user = await user_service.get_user_by_telegram(callback.from_user.id)
        operator = await user_service.get_user(data['operator_id'])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ
        from db.models.inventory import InventoryTransaction, TransactionType
        
        for item in data['items']:
            # –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏
            # –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤
            transaction = InventoryTransaction(
                ingredient_id=1,  # –ó–∞–≥–ª—É—à–∫–∞
                transaction_type=TransactionType.ISSUE,
                quantity=-item['quantity'],  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –≤—ã–¥–∞—á–∏
                user_id=warehouse_user.id,
                assigned_to_id=operator.id,
                notes=f"–í—ã–¥–∞—á–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator.full_name or operator.username}"
            )
            db.add(transaction)
        
        await db.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket
        await ws_manager.send_personal_message({
            'type': 'inventory_issued',
            'message': f'–í–∞–º –≤—ã–¥–∞–Ω –Ω–∞–±–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –æ—Ç —Å–∫–ª–∞–¥–∞',
            'items': data['items']
        }, operator.id)
        
        await callback.message.edit_text(
            f"‚úÖ –í—ã–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator.full_name or operator.username}\n"
            f"üì¶ –í—ã–¥–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(data['items'])}"
        )
    
    await state.clear()