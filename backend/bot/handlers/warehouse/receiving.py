from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from decimal import Decimal
from datetime import datetime

from db.database import AsyncSessionLocal
from db.models.user import UserRole
from core.services.user_service import UserService
from core.services.file_service import file_service
from bot.states import WarehouseReceivingStates
from bot.keyboards.inline import get_ingredients_keyboard, get_confirm_keyboard
from bot.filters import RoleFilter
from api.websocket import ws_manager

router = Router(name="warehouse_receiving")

@router.message(F.text == "üì• –ü—Ä–∏–µ–º–∫–∞", RoleFilter(UserRole.WAREHOUSE))
async def start_receiving(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–µ–º–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    await state.clear()
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        from sqlalchemy import select
        from db.models.ingredient import Ingredient
        
        result = await db.execute(select(Ingredient).order_by(Ingredient.name))
        ingredients = result.scalars().all()
        
        if not ingredients:
            await message.answer("‚ùå –ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        keyboard = get_ingredients_keyboard(ingredients)
        await message.answer(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∫–∏:",
            reply_markup=keyboard
        )
        await state.set_state(WarehouseReceivingStates.select_ingredient)

@router.callback_query(
    WarehouseReceivingStates.select_ingredient,
    F.data.startswith("ingredient:")
)
async def ingredient_selected_for_receiving(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"""
    ingredient_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–µ
    async with AsyncSessionLocal() as db:
        from db.models.ingredient import Ingredient
        ingredient = await db.get(Ingredient, ingredient_id)
        
        await state.update_data(
            ingredient_id=ingredient_id,
            ingredient_name=ingredient.name,
            current_stock=float(ingredient.current_stock)
        )
    
    await callback.message.edit_text(
        f"üì¶ –ü—Ä–∏–µ–º–∫–∞: {ingredient.name}\n"
        f"üìä –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {ingredient.current_stock} {ingredient.unit}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ({ingredient.unit}):"
    )
    await state.set_state(WarehouseReceivingStates.enter_quantity)

@router.message(WarehouseReceivingStates.enter_quantity)
async def quantity_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        quantity = Decimal(message.text.replace(',', '.'))
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        await state.update_data(quantity=quantity)
        
        await message.answer(
            "üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –∏–ª–∏ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã:"
        )
        await state.set_state(WarehouseReceivingStates.enter_invoice_number)
        
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
        )

@router.message(WarehouseReceivingStates.enter_invoice_number)
async def invoice_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π"""
    await state.update_data(invoice_number=message.text.strip())
    
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ä–æ–±–æ–∫/—É–ø–∞–∫–æ–≤–æ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:"
    )
    await state.set_state(WarehouseReceivingStates.photo_boxes)

@router.message(WarehouseReceivingStates.photo_boxes, F.photo)
async def photo_received(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    photo = message.photo[-1]
    photo_file = await message.bot.get_file(photo.file_id)
    photo_data = await message.bot.download_file(photo_file.file_path)
    
    photo_path = await file_service.save_photo(
        photo_data.read(),
        prefix="receiving"
    )
    
    data = await state.get_data()
    photos = data.get('photos', [])
    photos.append(photo_path)
    await state.update_data(photos=photos)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    text = f"""
üìã **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º–∫—É —Ç–æ–≤–∞—Ä–∞:**

üì¶ **–¢–æ–≤–∞—Ä:** {data['ingredient_name']}
üìä **–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:** {data['current_stock']:.2f}
‚ûï **–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è:** {data['quantity']:.2f}
üìà **–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫:** {data['current_stock'] + float(data['quantity']):.2f}
üìÑ **–ù–∞–∫–ª–∞–¥–Ω–∞—è:** {data['invoice_number']}
üì∏ **–§–æ—Ç–æ:** {len(photos)} —à—Ç.

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
    
    await message.answer(
        text,
        reply_markup=get_confirm_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(WarehouseReceivingStates.confirm)

@router.callback_query(
    WarehouseReceivingStates.confirm,
    F.data == "confirm:yes"
)
async def confirm_receiving(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∫–∏"""
    data = await state.get_data()
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = UserService(db)
        user = await user_service.get_user_by_telegram(callback.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        from db.models.ingredient import Ingredient
        ingredient = await db.get(Ingredient, data['ingredient_id'])
        ingredient.current_stock += data['quantity']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–∫–µ
        from db.models.inventory import InventoryTransaction, TransactionType
        
        transaction = InventoryTransaction(
            ingredient_id=data['ingredient_id'],
            transaction_type=TransactionType.RECEIVING,
            quantity=data['quantity'],
            user_id=user.id,
            invoice_number=data['invoice_number'],
            photos=data.get('photos', []),
            notes=f"–ü—Ä–∏–µ–º–∫–∞ —á–µ—Ä–µ–∑ Telegram"
        )
        
        db.add(transaction)
        await db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        await ws_manager.broadcast_inventory_update({
            'ingredient_id': data['ingredient_id'],
            'new_stock': float(ingredient.current_stock),
            'transaction_type': 'receiving',
            'quantity': float(data['quantity'])
        })
        
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–∏–µ–º–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            f"üì¶ {ingredient.name}\n"
            f"üìä –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {ingredient.current_stock:.2f} {ingredient.unit}"
        )
    
    await state.clear()