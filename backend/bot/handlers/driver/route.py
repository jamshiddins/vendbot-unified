from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, date

from db.database import AsyncSessionLocal
from db.models.user import UserRole
from core.services.user_service import UserService
from bot.filters import RoleFilter
from api.websocket import ws_manager

router = Router(name="driver_route")

@router.message(F.text == "üöõ –ú–∞—Ä—à—Ä—É—Ç", RoleFilter(UserRole.DRIVER))
async def show_route(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await state.clear()
    
    # –î–µ–º–æ –º–∞—Ä—à—Ä—É—Ç
    route_points = [
        {
            "id": 1,
            "name": "–¢–¶ –ú–µ–≥–∞ –ü–ª–∞–Ω–µ—Ç",
            "address": "—É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞, 41",
            "machines": 3,
            "priority": 1,
            "status": "pending"
        },
        {
            "id": 2,
            "name": "–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä –ü–æ–π—Ç–∞—Ö—Ç",
            "address": "—É–ª. –ë—É—Ö–∞—Ä–∞, 10",
            "machines": 2,
            "priority": 2,
            "status": "pending"
        },
        {
            "id": 3,
            "name": "–¢–†–¶ –°–∞–π—Ä–∞–º",
            "address": "—É–ª. –ö–∞—Ç–∞—Ä—Ç–∞–ª, 28",
            "machines": 4,
            "priority": 3,
            "status": "pending"
        }
    ]
    
    await state.update_data(route_points=route_points, current_point=0)
    
    text = f"üóì **–ú–∞—Ä—à—Ä—É—Ç –Ω–∞ {date.today().strftime('%d.%m.%Y')}**\n\n"
    text += f"üìç –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(route_points)}\n"
    text += f"‚òï –í—Å–µ–≥–æ –º–∞—à–∏–Ω: {sum(p['machines'] for p in route_points)}\n\n"
    
    for i, point in enumerate(route_points, 1):
        status_emoji = "‚úÖ" if point['status'] == 'completed' else "‚è≥"
        text += f"{status_emoji} **{i}. {point['name']}**\n"
        text += f"   üìç {point['address']}\n"
        text += f"   ‚òï –ú–∞—à–∏–Ω: {point['machines']}\n\n"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="start_route")
    keyboard.button(text="üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data="show_map")
    keyboard.adjust(1)
    
    await message.answer(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "start_route")
async def start_route(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    data = await state.get_data()
    route_points = data.get('route_points', [])
    
    if not route_points:
        await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –ø—É—Å—Ç")
        return
    
    current_point = route_points[0]
    await state.update_data(current_point=0, start_time=datetime.now())
    
    text = f"üöõ **–ú–∞—Ä—à—Ä—É—Ç –Ω–∞—á–∞—Ç!**\n\n"
    text += f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞:\n"
    text += f"**{current_point['name']}**\n"
    text += f"üìç {current_point['address']}\n"
    text += f"‚òï –ú–∞—à–∏–Ω: {current_point['machines']}\n\n"
    text += f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%H:%M')}"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü—Ä–∏–±—ã–ª –Ω–∞ —Ç–æ—á–∫—É", callback_data="arrived")
    keyboard.button(text="üìç –ù–∞–≤–∏–≥–∞—Ü–∏—è", callback_data=f"navigate:{current_point['id']}")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "arrived")
async def arrived_at_point(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ —Ç–æ—á–∫—É"""
    data = await state.get_data()
    current_idx = data.get('current_point', 0)
    route_points = data.get('route_points', [])
    
    if current_idx >= len(route_points):
        await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        return
    
    current_point = route_points[current_idx]
    
    # –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
    arrival_time = datetime.now()
    await state.update_data(arrival_time=arrival_time)
    
    text = f"‚úÖ **–ü—Ä–∏–±—ã–ª–∏ –≤ {current_point['name']}**\n\n"
    text += f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {arrival_time.strftime('%H:%M')}\n"
    text += f"‚òï –û–±—Å–ª—É–∂–∏—Ç—å –º–∞—à–∏–Ω: {current_point['machines']}\n\n"
    text += "–ù–∞—á–Ω–∏—Ç–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üì¶ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="refill_machine")
    keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ—á–∫—É", callback_data="complete_point")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
    async with AsyncSessionLocal() as db:
        user_service = UserService(db)
        driver = await user_service.get_user_by_telegram(callback.from_user.id)
        
        await ws_manager.broadcast_to_role({
            'type': 'driver_arrived',
            'driver_id': driver.id,
            'driver_name': driver.full_name or driver.username,
            'location': current_point['name'],
            'timestamp': arrival_time.isoformat()
        }, 'admin')

@router.callback_query(F.data == "complete_point")
async def complete_point(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—á–∫–∏"""
    data = await state.get_data()
    current_idx = data.get('current_point', 0)
    route_points = data.get('route_points', [])
    
    # –û—Ç–º–µ—á–∞–µ–º —Ç–æ—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    route_points[current_idx]['status'] = 'completed'
    current_idx += 1
    
    if current_idx >= len(route_points):
        # –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        start_time = data.get('start_time', datetime.now())
        duration = datetime.now() - start_time
        
        text = f"üéâ **–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        text += f"üìç –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫: {len(route_points)}\n"
        text += f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration.seconds // 3600}—á {(duration.seconds % 3600) // 60}–º–∏–Ω\n"
        text += f"‚òï –û–±—Å–ª—É–∂–µ–Ω–æ –º–∞—à–∏–Ω: {sum(p['machines'] for p in route_points)}\n\n"
        text += "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëè"
        
        await callback.message.edit_text(text, parse_mode="Markdown")
        await state.clear()
    else:
        # –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞
        next_point = route_points[current_idx]
        await state.update_data(current_point=current_idx, route_points=route_points)
        
        text = f"‚úÖ –¢–æ—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        text += f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞:\n"
        text += f"**{next_point['name']}**\n"
        text += f"üìç {next_point['address']}\n"
        text += f"‚òï –ú–∞—à–∏–Ω: {next_point['machines']}\n"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üöõ –ï—Ö–∞—Ç—å –¥–∞–ª—å—à–µ", callback_data="arrived")
        keyboard.button(text="üìç –ù–∞–≤–∏–≥–∞—Ü–∏—è", callback_data=f"navigate:{next_point['id']}")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )