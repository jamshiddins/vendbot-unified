from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from db.database import AsyncSessionLocal
from db.models.asset import AssetType
from db.models.user import UserRole
from db.models.operation import OperationType
from core.services.asset_service import AssetService
from core.services.operation_service import OperationService
from core.services.user_service import UserService
from core.services.file_service import file_service
from bot.states import HopperInstallStates
from bot.keyboards.inline import (
    get_hoppers_keyboard,
    get_machines_keyboard,
    get_confirm_keyboard
)
from bot.filters import RoleFilter
from api.websocket import ws_manager

router = Router(name="hopper_install")

@router.message(F.text == "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–Ω–∫–µ—Ä", RoleFilter(UserRole.OPERATOR))
async def start_hopper_install(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–Ω–∫–µ—Ä–∞"""
    await state.clear()
    
    async with AsyncSessionLocal() as db:
        asset_service = AssetService(db)
        hoppers = await asset_service.get_available_hoppers()
        
        if not hoppers:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return
        
        keyboard = get_hoppers_keyboard(hoppers)
        await message.answer(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–Ω–∫–µ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:",
            reply_markup=keyboard
        )
        await state.set_state(HopperInstallStates.select_hopper)

@router.callback_query(
    HopperInstallStates.select_hopper,
    F.data.startswith("hopper:")
)
async def hopper_selected_for_install(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É–Ω–∫–µ—Ä–∞"""
    hopper_id = int(callback.data.split(":")[1])
    await state.update_data(hopper_id=hopper_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    async with AsyncSessionLocal() as db:
        asset_service = AssetService(db)
        machines = await asset_service.get_assets(asset_type=AssetType.MACHINE)
        
        if not machines:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω.")
            await state.clear()
            return
        
        keyboard = get_machines_keyboard(machines)
        await callback.message.edit_text(
            "‚òï –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–Ω–∫–µ—Ä–∞:",
            reply_markup=keyboard
        )
        await state.set_state(HopperInstallStates.select_machine)

@router.callback_query(
    HopperInstallStates.select_machine,
    F.data.startswith("machine:")
)
async def machine_selected_for_install(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã"""
    machine_id = int(callback.data.split(":")[1])
    await state.update_data(machine_id=machine_id)
    
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±—É–Ω–∫–µ—Ä–∞:"
    )
    await state.set_state(HopperInstallStates.photo_installation)

@router.message(HopperInstallStates.photo_installation, F.photo)
async def photo_installation_received(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    photo_file = await message.bot.get_file(photo.file_id)
    photo_data = await message.bot.download_file(photo_file.file_path)
    
    photo_path = await file_service.save_photo(
        photo_data.read(),
        prefix="hopper_install"
    )
    
    await state.update_data(photo=photo_path)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    async with AsyncSessionLocal() as db:
        asset_service = AssetService(db)
        hopper = await asset_service.get(data['hopper_id'])
        machine = await asset_service.get(data['machine_id'])
    
    text = f"""
üìã **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –±—É–Ω–∫–µ—Ä–∞:**

üì¶ **–ë—É–Ω–∫–µ—Ä:** {hopper.name} ({hopper.inventory_number})
‚òï **–ú–∞—à–∏–Ω–∞:** {machine.name} - {machine.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì∏ **–§–æ—Ç–æ:** –ó–∞–≥—Ä—É–∂–µ–Ω–æ

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
    
    await message.answer(
        text,
        reply_markup=get_confirm_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(HopperInstallStates.confirm)

@router.callback_query(
    HopperInstallStates.confirm,
    F.data == "confirm:yes"
)
async def confirm_install(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    data = await state.get_data()
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = UserService(db)
        user = await user_service.get_user_by_telegram(callback.from_user.id)
        
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        from api.schemas import HopperOperationCreate
        
        operation_data = HopperOperationCreate(
            hopper_id=data['hopper_id'],
            operation_type=OperationType.INSTALL,
            machine_id=data['machine_id'],
            photos=[data['photo']]
        )
        
        operation_service = OperationService(db)
        try:
            operation = await operation_service.create_hopper_operation(
                operation_data,
                operator_id=user.id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
            await ws_manager.broadcast_operation(
                operation.dict(),
                source_channel="telegram"
            )
            
            await callback.message.edit_text(
                f"‚úÖ –ë—É–Ω–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
                f"ID –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation.id}"
            )
            
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}"
            )
    
    await state.clear()