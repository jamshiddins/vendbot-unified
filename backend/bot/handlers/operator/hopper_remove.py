from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_

from db.database import AsyncSessionLocal
from db.models.asset import Asset, AssetType
from db.models.user import UserRole
from db.models.operation import HopperOperation, OperationType
from core.services.operation_service import OperationService
from core.services.user_service import UserService
from core.services.file_service import file_service
from bot.states import HopperRemoveStates
from bot.keyboards.inline import get_confirm_keyboard
from bot.filters import RoleFilter
from api.websocket import ws_manager

router = Router(name="hopper_remove")

@router.message(F.text == "üì¶ –°–Ω—è—Ç—å –±—É–Ω–∫–µ—Ä", RoleFilter(UserRole.OPERATOR))
async def start_hopper_remove(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–Ω—è—Ç–∏—è –±—É–Ω–∫–µ—Ä–∞"""
    await state.clear()
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—É–Ω–∫–µ—Ä–∞
        query = select(Asset).join(
            HopperOperation,
            and_(
                HopperOperation.hopper_id == Asset.id,
                HopperOperation.operation_type == OperationType.INSTALL
            )
        ).where(
            Asset.type == AssetType.HOPPER
        ).distinct()
        
        result = await db.execute(query)
        installed_hoppers = result.scalars().all()
        
        if not installed_hoppers:
            await message.answer("‚ùå –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è.")
            return
        
        from bot.keyboards.inline import get_hoppers_keyboard
        keyboard = get_hoppers_keyboard(installed_hoppers)
        await message.answer(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–Ω–∫–µ—Ä –¥–ª—è —Å–Ω—è—Ç–∏—è:",
            reply_markup=keyboard
        )
        await state.set_state(HopperRemoveStates.select_hopper)

@router.callback_query(
    HopperRemoveStates.select_hopper,
    F.data.startswith("hopper:")
)
async def hopper_selected_for_remove(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É–Ω–∫–µ—Ä–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è"""
    hopper_id = int(callback.data.split(":")[1])
    await state.update_data(hopper_id=hopper_id)
    
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±—É–Ω–∫–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–Ω—è—Ç–∏–µ–º:"
    )
    await state.set_state(HopperRemoveStates.photo_before_remove)

@router.message(HopperRemoveStates.photo_before_remove, F.photo)
async def photo_before_remove_received(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ —Å–Ω—è—Ç–∏–µ–º"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    photo_file = await message.bot.get_file(photo.file_id)
    photo_data = await message.bot.download_file(photo_file.file_path)
    
    photo_path = await file_service.save_photo(
        photo_data.read(),
        prefix="hopper_remove"
    )
    
    await state.update_data(photo=photo_path)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    async with AsyncSessionLocal() as db:
        from core.services.asset_service import AssetService
        asset_service = AssetService(db)
        hopper = await asset_service.get(data['hopper_id'])
    
    text = f"""
üìã **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–Ω—è—Ç–∏–µ –±—É–Ω–∫–µ—Ä–∞:**

üì¶ **–ë—É–Ω–∫–µ—Ä:** {hopper.name} ({hopper.inventory_number})
üì∏ **–§–æ—Ç–æ:** –ó–∞–≥—Ä—É–∂–µ–Ω–æ

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–Ω—è—Ç–∏–µ?
"""
    
    await message.answer(
        text,
        reply_markup=get_confirm_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(HopperRemoveStates.confirm)

@router.callback_query(
    HopperRemoveStates.confirm,
    F.data == "confirm:yes"
)
async def confirm_remove(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è"""
    data = await state.get_data()
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = UserService(db)
        user = await user_service.get_user_by_telegram(callback.from_user.id)
        
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å–Ω—è—Ç–∏—è
        from api.schemas import HopperOperationCreate
        
        operation_data = HopperOperationCreate(
            hopper_id=data['hopper_id'],
            operation_type=OperationType.REMOVE,
            photos=[data['photo']]
        )
        
        operation_service = OperationService(db)
        try:
            operation = await operation_service.create_hopper_operation(
                operation_data,
                operator_id=user.id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
            await ws_manager.broadcast_operation(
                operation.dict(),
                source_channel="telegram"
            )
            
            await callback.message.edit_text(
                f"‚úÖ –ë—É–Ω–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç!\n"
                f"ID –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation.id}"
            )
            
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}"
            )
    
    await state.clear()