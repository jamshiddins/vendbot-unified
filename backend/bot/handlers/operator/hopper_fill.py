from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from decimal import Decimal
from typing import List

from db.database import AsyncSessionLocal
from db.models.asset import AssetType
from db.models.user import UserRole
from core.services.asset_service import AssetService
from core.services.operation_service import OperationService
from core.services.user_service import UserService
from core.services.file_service import file_service
from bot.states import HopperFillStates
from bot.keyboards.inline import (
    get_hoppers_keyboard,
    get_ingredients_keyboard,
    get_machines_keyboard,
    get_confirm_keyboard,
    get_skip_keyboard
)
from bot.filters import RoleFilter

router = Router(name="hopper_fill")

@router.message(F.text == "üì¶ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±—É–Ω–∫–µ—Ä", RoleFilter(UserRole.OPERATOR))
async def start_hopper_fill(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–Ω–∫–µ—Ä–∞"""
    await state.clear()
    
    async with AsyncSessionLocal() as db:
        asset_service = AssetService(db)
        hoppers = await asset_service.get_available_hoppers()
        
        if not hoppers:
            await message.answer(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return
        
        keyboard = get_hoppers_keyboard(hoppers)
        await message.answer(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–Ω–∫–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        await state.set_state(HopperFillStates.select_hopper)

@router.callback_query(
    HopperFillStates.select_hopper,
    F.data.startswith("hopper:")
)
async def hopper_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É–Ω–∫–µ—Ä–∞"""
    hopper_id = int(callback.data.split(":")[1])
    await state.update_data(hopper_id=hopper_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    async with AsyncSessionLocal() as db:
        from sqlalchemy import select
        from db.models.ingredient import Ingredient
        
        result = await db.execute(select(Ingredient))
        ingredients = result.scalars().all()
        
        if not ingredients:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ."
            )
            await state.clear()
            return
        
        keyboard = get_ingredients_keyboard(ingredients)
        await callback.message.edit_text(
            "üåø –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:",
            reply_markup=keyboard
        )
        await state.set_state(HopperFillStates.select_ingredient)

@router.callback_query(
    HopperFillStates.select_ingredient,
    F.data.startswith("ingredient:")
)
async def ingredient_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"""
    ingredient_id = int(callback.data.split(":")[1])
    await state.update_data(ingredient_id=ingredient_id)
    
    await callback.message.edit_text(
        "üìè –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –î–û –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–≥):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5"
    )
    await state.set_state(HopperFillStates.enter_quantity_before)

@router.message(HopperFillStates.enter_quantity_before)
async def quantity_before_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        quantity = Decimal(message.text.replace(',', '.'))
        if quantity < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
        await state.update_data(quantity_before=quantity)
        
        await message.answer(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±—É–Ω–∫–µ—Ä–∞ –î–û –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:"
        )
        await state.set_state(HopperFillStates.photo_before)
        
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5"
        )

@router.message(HopperFillStates.photo_before, F.photo)
async def photo_before_received(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    photo = message.photo[-1]
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo_file = await message.bot.get_file(photo.file_id)
    photo_data = await message.bot.download_file(photo_file.file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_path = await file_service.save_photo(
        photo_data.read(),
        prefix="hopper_before"
    )
    
    data = await state.get_data()
    photos_before = data.get('photos_before', [])
    photos_before.append(photo_path)
    await state.update_data(photos_before=photos_before)
    
    await message.answer(
        "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        "üìè –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (–∫–≥):"
    )
    await state.set_state(HopperFillStates.enter_quantity_added)

@router.message(HopperFillStates.enter_quantity_added)
async def quantity_added_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        quantity = Decimal(message.text.replace(',', '.'))
        if quantity < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
        await state.update_data(quantity_added=quantity)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ
        data = await state.get_data()
        quantity_after = data['quantity_before'] + quantity
        await state.update_data(quantity_after=quantity_after)
        
        await message.answer(
            f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–û–°–õ–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {quantity_after:.2f} –∫–≥\n\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±—É–Ω–∫–µ—Ä–∞ –ü–û–°–õ–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:"
        )
        await state.set_state(HopperFillStates.photo_after)
        
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3.0"
        )

@router.message(HopperFillStates.photo_after, F.photo)
async def photo_after_received(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    photo = message.photo[-1]
    photo_file = await message.bot.get_file(photo.file_id)
    photo_data = await message.bot.download_file(photo_file.file_path)
    
    photo_path = await file_service.save_photo(
        photo_data.read(),
        prefix="hopper_after"
    )
    
    data = await state.get_data()
    photos_after = data.get('photos_after', [])
    photos_after.append(photo_path)
    await state.update_data(photos_after=photos_after)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    async with AsyncSessionLocal() as db:
        asset_service = AssetService(db)
        machines = await asset_service.get_assets(asset_type=AssetType.MACHINE)
        
        if machines:
            keyboard = get_machines_keyboard(machines)
            await message.answer(
                "‚òï –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É, –∫—É–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –±—É–Ω–∫–µ—Ä:",
                reply_markup=keyboard
            )
            await state.set_state(HopperFillStates.select_machine)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—à–∏–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
            await show_confirmation(message, state)

@router.callback_query(
    HopperFillStates.select_machine,
    F.data.startswith("machine:")
)
async def machine_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã"""
    machine_id = int(callback.data.split(":")[1])
    await state.update_data(machine_id=machine_id)
    
    await callback.message.edit_text(
        "üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(HopperFillStates.notes)

@router.message(HopperFillStates.notes)
async def notes_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    await state.update_data(notes=message.text)
    await show_confirmation(message, state)

@router.callback_query(HopperFillStates.notes, F.data == "skip")
async def skip_notes(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    await show_confirmation(callback.message, state)

async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö
    async with AsyncSessionLocal() as db:
        asset_service = AssetService(db)
        hopper = await asset_service.get(data['hopper_id'])
        
        from db.models.ingredient import Ingredient
        ingredient = await db.get(Ingredient, data['ingredient_id'])
        
        machine = None
        if data.get('machine_id'):
            machine = await asset_service.get(data['machine_id'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = f"""
üìã **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:**

üì¶ **–ë—É–Ω–∫–µ—Ä:** {hopper.name} ({hopper.inventory_number})
üåø **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:** {ingredient.name}
üìè **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–û:** {data['quantity_before']:.2f} –∫–≥
‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–æ:** {data['quantity_added']:.2f} –∫–≥
üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–û–°–õ–ï:** {data['quantity_after']:.2f} –∫–≥
‚òï **–ú–∞—à–∏–Ω–∞:** {machine.name if machine else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üì∏ **–§–æ—Ç–æ:** {len(data.get('photos_before', []))} –¥–æ, {len(data.get('photos_after', []))} –ø–æ—Å–ª–µ
üìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {data.get('notes', '–ù–µ—Ç')}

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
    
    await message.answer(
        text,
        reply_markup=get_confirm_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(HopperFillStates.confirm)

@router.callback_query(
    HopperFillStates.confirm,
    F.data == "confirm:yes"
)
async def confirm_operation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = UserService(db)
        user = await user_service.get_user_by_telegram(callback.from_user.id)
        
        if not user:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
            )
            await state.clear()
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
        all_photos = data.get('photos_before', []) + data.get('photos_after', [])
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        from api.schemas import HopperOperationCreate
        from db.models.operation import OperationType
        
        operation_data = HopperOperationCreate(
            hopper_id=data['hopper_id'],
            operation_type=OperationType.FILL,
            ingredient_id=data['ingredient_id'],
            quantity_before=data['quantity_before'],
            quantity_after=data['quantity_after'],
            machine_id=data.get('machine_id'),
            notes=data.get('notes'),
            photos=all_photos
        )
        
        operation_service = OperationService(db)
        try:
            operation = await operation_service.create_hopper_operation(
                operation_data,
                operator_id=user.id
            )
            
            await callback.message.edit_text(
                f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
                f"ID –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation.id}"
            )
            
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}"
            )
    
    await state.clear()

@router.callback_query(
    HopperFillStates.confirm,
    F.data == "confirm:no"
)
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
@router.callback_query(F.data == "cancel")
async def cancel_any_state(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ"""
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()